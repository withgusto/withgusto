{
  "name": "gulp-useref",
  "version": "0.4.3",
  "description": "Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "through2": "^0.4.1",
    "gulp-util": "^2.2.14",
    "glob": "^3.2.9",
    "node-useref": "^0.2.7"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "gulp-mocha": "^0.4.1",
    "gulp-util": "^2.2.14",
    "gulp": "^3.6.1",
    "gulp-jshint": "^1.5.3"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonkemp/gulp-useref.git"
  },
  "keywords": [
    "gulpplugin",
    "html",
    "scripts",
    "css",
    "optimize",
    "concat"
  ],
  "author": {
    "name": "Jonathan Kemp",
    "email": "kempdogg@gmail.com",
    "url": "http://jonkemp.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jonkemp/gulp-useref/issues"
  },
  "homepage": "https://github.com/jonkemp/gulp-useref",
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-useref [![Build Status](https://travis-ci.org/jonkemp/gulp-useref.png?branch=master)](https://travis-ci.org/jonkemp/gulp-useref)\r\n\r\n> Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets with [useref](https://github.com/digisfera/useref)\r\n\r\nInspired by the grunt plugin [grunt-useref](https://github.com/pajtai/grunt-useref). It can handle file concatenation but not minification. Files are then passed down the stream. For minification of assets or other modifications, use [gulp-filter](https://github.com/sindresorhus/gulp-filter) to filter specific types of assets.\r\n\r\n\r\n## Install\r\n\r\nInstall with [npm](https://npmjs.org/package/gulp-useref)\r\n\r\n```\r\nnpm install --save-dev gulp-useref\r\n```\r\n\r\n\r\n## Usage\r\n\r\nThe following example will parse the build blocks in the HTML, replace them and pass those files through. Assets inside the build blocks will be concatenated and passed through in a stream as well.\r\n\r\n```js\r\nvar gulp = require('gulp'),\r\n    useref = require('gulp-useref');\r\n\r\ngulp.task('default', function () {\r\n\treturn gulp.src('app/*.html')\r\n        .pipe(useref.assets())\r\n        .pipe(useref.restore())\r\n        .pipe(useref())\r\n        .pipe(gulp.dest('dist'));\r\n});\r\n```\r\n\r\nIf you want to minify your assets or perform some other modification, you can use [gulp-filter](https://github.com/sindresorhus/gulp-filter) to handle specific types of assets. When you want all the original files back, just call the restore method.\r\n\r\n```js\r\nvar gulp = require('gulp'),\r\n    useref = require('gulp-useref'),\r\n    filter = require('gulp-filter'),\r\n    uglify = require('gulp-uglify'),\r\n    minifyCss = require('gulp-minify-css');\r\n\r\ngulp.task('html', function () {\r\n    var jsFilter = filter('**/*.js');\r\n    var cssFilter = filter('**/*.css');\r\n\r\n    return gulp.src('app/*.html')\r\n        .pipe(useref.assets())\r\n        .pipe(jsFilter)\r\n        .pipe(uglify())\r\n        .pipe(jsFilter.restore())\r\n        .pipe(cssFilter)\r\n        .pipe(minifyCss())\r\n        .pipe(cssFilter.restore())\r\n        .pipe(useref.restore())\r\n        .pipe(useref())\r\n        .pipe(gulp.dest('dist'));\r\n});\r\n```\r\n\r\n\r\nBlocks are expressed as:\r\n\r\n```html\r\n<!-- build:<type>(alternate search path) <path> -->\r\n... HTML Markup, list of script / link tags.\r\n<!-- endbuild -->\r\n```\r\n\r\n- **type**: either `js` or `css`\r\n- **alternate search path**: (optional) By default the input files are relative to the treated file. Alternate search path allows one to change that\r\n- **path**: the file path of the optimized file, the target output\r\n\r\nAn example of this in completed form can be seen below:\r\n\r\n    <html>\r\n    <head>\r\n        <!-- build:css css/combined.css -->\r\n        <link href=\"css/one.css\" rel=\"stylesheet\">\r\n        <link href=\"css/two.css\" rel=\"stylesheet\">\r\n        <!-- endbuild -->\r\n    </head>\r\n    <body>\r\n        <!-- build:js scripts/combined.js -->\r\n        <script type=\"text/javascript\" src=\"scripts/one.js\"></script>\r\n        <script type=\"text/javascript\" src=\"scripts/two.js\"></script>\r\n        <!-- endbuild -->\r\n    </body>\r\n    </html>\r\n\r\n\r\nThe resulting HTML would be:\r\n\r\n    <html>\r\n    <head>\r\n        <link rel=\"stylesheet\" href=\"css/combined.css\"/>\r\n    </head>\r\n    <body>\r\n        <script src=\"scripts/combined.js\"></script>\r\n    </body>\r\n    </html>\r\n\r\n## API\r\n\r\n### useref.assets(options)\r\n\r\nReturns a stream with the concatenated asset files from the build blocks inside the HTML.\r\n\r\n#### options.searchPath\r\n\r\nType: `String` or `Array`  \r\nDefault: `none`  \r\n\r\nSpecify the location to search for asset files, relative to the current working directory. Can be a string or array of strings.\r\n\r\n### useref.restore()\r\n\r\nBrings back the previously filtered out HTML files.\r\n\r\n\r\n## Notes\r\n\r\n* [ClosureCompiler.js](https://github.com/dcodeIO/ClosureCompiler.js) doesn't support Buffers, which means if you want to use [gulp-closure-compiler](https://github.com/sindresorhus/gulp-closure-compiler) you'll have to first write out the `combined.js` to disk. See [this](https://github.com/dcodeIO/ClosureCompiler.js/issues/11) for more information.\r\n\r\n## Acknowledgments\r\n\r\n* Whitney Young ([@wbyoung](https://github.com/wbyoung)) for suggesting a separate stream for assets and the use of [gulp-filter](https://github.com/sindresorhus/gulp-filter) to filter assets.\r\n\r\n## License\r\n\r\nMIT Â© [Jonathan Kemp](http://jonkemp.com)\r\n",
  "readmeFilename": "README.md",
  "_id": "gulp-useref@0.4.3",
  "_from": "gulp-useref@^0.4.2"
}
